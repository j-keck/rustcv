var searchIndex = {};
searchIndex["opencv_sys"] = {"doc":"","items":[[3,"String","opencv_sys","",null,null],[12,"str","","",0,null],[12,"length","","",0,null],[3,"ByteArray","","",null,null],[12,"data","","",1,null],[12,"length","","",1,null],[3,"IntVector","","",null,null],[12,"val","","",2,null],[12,"length","","",2,null],[3,"RawData","","",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"data","","",3,null],[3,"Point","","",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"Points","","",null,null],[12,"points","","",5,null],[12,"length","","",5,null],[3,"Contours","","",null,null],[12,"contours","","",6,null],[12,"length","","",6,null],[3,"Rect","","",null,null],[12,"x","","",7,null],[12,"y","","",7,null],[12,"width","","",7,null],[12,"height","","",7,null],[3,"Rects","","",null,null],[12,"rects","","",8,null],[12,"length","","",8,null],[3,"Size","","",null,null],[12,"width","","",9,null],[12,"height","","",9,null],[3,"Scalar","","",null,null],[12,"val1","","",10,null],[12,"val2","","",10,null],[12,"val3","","",10,null],[12,"val4","","",10,null],[3,"KeyPoint","","",null,null],[12,"x","","",11,null],[12,"y","","",11,null],[12,"size","","",11,null],[12,"angle","","",11,null],[12,"response","","",11,null],[12,"octave","","",11,null],[12,"classID","","",11,null],[3,"KeyPoints","","",null,null],[12,"keypoints","","",12,null],[12,"length","","",12,null],[3,"Moment","","",null,null],[12,"m00","","",13,null],[12,"m10","","",13,null],[12,"m01","","",13,null],[12,"m20","","",13,null],[12,"m11","","",13,null],[12,"m02","","",13,null],[12,"m30","","",13,null],[12,"m21","","",13,null],[12,"m12","","",13,null],[12,"m03","","",13,null],[12,"mu20","","",13,null],[12,"mu11","","",13,null],[12,"mu02","","",13,null],[12,"mu30","","",13,null],[12,"mu21","","",13,null],[12,"mu12","","",13,null],[12,"mu03","","",13,null],[12,"nu20","","",13,null],[12,"nu11","","",13,null],[12,"nu02","","",13,null],[12,"nu30","","",13,null],[12,"nu21","","",13,null],[12,"nu12","","",13,null],[12,"nu03","","",13,null],[3,"Mats","","",null,null],[12,"mats","","",14,null],[12,"length","","",14,null],[3,"max_align_t","","",null,null],[12,"__clang_max_align_nonce1","","",15,null],[12,"__bindgen_padding_0","","",15,null],[12,"__clang_max_align_nonce2","","",15,null],[3,"VecDouble","","",null,null],[12,"val","","",16,null],[12,"length","","",16,null],[5,"Mats_get","","",null,null],[5,"toByteArray","","",null,null],[5,"ByteArray_Release","","",null,null],[5,"Contours_Close","","",null,null],[5,"KeyPoints_Close","","",null,null],[5,"Rects_Close","","",null,null],[5,"Mats_Close","","",null,null],[5,"Point_Close","","",null,null],[5,"Points_Close","","",null,null],[5,"Mat_New","","",null,null],[5,"Mat_NewWithSize","","",null,null],[5,"Mat_NewFromScalar","","",null,null],[5,"Mat_NewFromBytes","","",null,null],[5,"Mat_Close","","",null,null],[5,"Mat_Empty","","",null,null],[5,"Mat_Clone","","",null,null],[5,"Mat_CopyTo","","",null,null],[5,"Mat_CopyToWithMask","","",null,null],[5,"Mat_ConvertTo","","",null,null],[5,"Mat_ToBytes","","",null,null],[5,"Mat_Region","","",null,null],[5,"Mat_Reshape","","",null,null],[5,"Mat_ConvertFp16","","",null,null],[5,"Mat_Mean","","",null,null],[5,"Mat_Rows","","",null,null],[5,"Mat_Cols","","",null,null],[5,"Mat_Channels","","",null,null],[5,"Mat_Type","","",null,null],[5,"Mat_Step","","",null,null],[5,"Mat_GetUChar","","",null,null],[5,"Mat_GetUChar3","","",null,null],[5,"Mat_GetSChar","","",null,null],[5,"Mat_GetSChar3","","",null,null],[5,"Mat_GetShort","","",null,null],[5,"Mat_GetShort3","","",null,null],[5,"Mat_GetInt","","",null,null],[5,"Mat_GetInt3","","",null,null],[5,"Mat_GetFloat","","",null,null],[5,"Mat_GetFloat3","","",null,null],[5,"Mat_GetDouble","","",null,null],[5,"Mat_GetDouble3","","",null,null],[5,"Mat_SetUChar","","",null,null],[5,"Mat_SetUChar3","","",null,null],[5,"Mat_SetSChar","","",null,null],[5,"Mat_SetSChar3","","",null,null],[5,"Mat_SetShort","","",null,null],[5,"Mat_SetShort3","","",null,null],[5,"Mat_SetInt","","",null,null],[5,"Mat_SetInt3","","",null,null],[5,"Mat_SetFloat","","",null,null],[5,"Mat_SetFloat3","","",null,null],[5,"Mat_SetDouble","","",null,null],[5,"Mat_SetDouble3","","",null,null],[5,"LUT","","",null,null],[5,"Mat_AbsDiff","","",null,null],[5,"Mat_Add","","",null,null],[5,"Mat_AddWeighted","","",null,null],[5,"Mat_BitwiseAnd","","",null,null],[5,"Mat_BitwiseNot","","",null,null],[5,"Mat_BitwiseOr","","",null,null],[5,"Mat_BitwiseXor","","",null,null],[5,"Mat_Compare","","",null,null],[5,"Mat_BatchDistance","","",null,null],[5,"Mat_BorderInterpolate","","",null,null],[5,"Mat_CalcCovarMatrix","","",null,null],[5,"Mat_CartToPolar","","",null,null],[5,"Mat_CompleteSymm","","",null,null],[5,"Mat_ConvertScaleAbs","","",null,null],[5,"Mat_CopyMakeBorder","","",null,null],[5,"Mat_CountNonZero","","",null,null],[5,"Mat_DCT","","",null,null],[5,"Mat_DFT","","",null,null],[5,"Mat_Divide","","",null,null],[5,"Mat_Eigen","","",null,null],[5,"Mat_Exp","","",null,null],[5,"Mat_ExtractChannel","","",null,null],[5,"Mat_FindNonZero","","",null,null],[5,"Mat_Flip","","",null,null],[5,"Mat_Gemm","","",null,null],[5,"Mat_GetOptimalDFTSize","","",null,null],[5,"Mat_Hconcat","","",null,null],[5,"Mat_Idct","","",null,null],[5,"Mat_Idft","","",null,null],[5,"Mat_InRange","","",null,null],[5,"Mat_InsertChannel","","",null,null],[5,"Mat_Invert","","",null,null],[5,"Mat_Log","","",null,null],[5,"Mat_Magnitude","","",null,null],[5,"Mat_Max","","",null,null],[5,"Mat_MeanStdDev","","",null,null],[5,"Mat_Merge","","",null,null],[5,"Mat_MinMaxLoc","","",null,null],[5,"Mat_Multiply","","",null,null],[5,"Mat_Subtract","","",null,null],[5,"Mat_Normalize","","",null,null],[5,"Norm","","",null,null],[5,"Mat_Split","","",null,null],[5,"Mat_Pow","","",null,null],[5,"Mat_Sum","","",null,null],[5,"TermCriteria_New","","",null,null],[5,"Net_ReadNetFromCaffe","","",null,null],[5,"Net_ReadNetFromTensorflow","","",null,null],[5,"Net_BlobFromImage","","",null,null],[5,"Net_Close","","",null,null],[5,"Net_Empty","","",null,null],[5,"Net_SetInput","","",null,null],[5,"Net_Forward","","",null,null],[5,"Net_GetBlobChannel","","",null,null],[5,"Net_GetBlobSize","","",null,null],[5,"AKAZE_Create","","",null,null],[5,"AKAZE_Close","","",null,null],[5,"AKAZE_Detect","","",null,null],[5,"AKAZE_DetectAndCompute","","",null,null],[5,"AgastFeatureDetector_Create","","",null,null],[5,"AgastFeatureDetector_Close","","",null,null],[5,"AgastFeatureDetector_Detect","","",null,null],[5,"BRISK_Create","","",null,null],[5,"BRISK_Close","","",null,null],[5,"BRISK_Detect","","",null,null],[5,"BRISK_DetectAndCompute","","",null,null],[5,"FastFeatureDetector_Create","","",null,null],[5,"FastFeatureDetector_Close","","",null,null],[5,"FastFeatureDetector_Detect","","",null,null],[5,"GFTTDetector_Create","","",null,null],[5,"GFTTDetector_Close","","",null,null],[5,"GFTTDetector_Detect","","",null,null],[5,"KAZE_Create","","",null,null],[5,"KAZE_Close","","",null,null],[5,"KAZE_Detect","","",null,null],[5,"KAZE_DetectAndCompute","","",null,null],[5,"MSER_Create","","",null,null],[5,"MSER_Close","","",null,null],[5,"MSER_Detect","","",null,null],[5,"ORB_Create","","",null,null],[5,"ORB_Close","","",null,null],[5,"ORB_Detect","","",null,null],[5,"ORB_DetectAndCompute","","",null,null],[5,"SimpleBlobDetector_Create","","",null,null],[5,"SimpleBlobDetector_Close","","",null,null],[5,"SimpleBlobDetector_Detect","","",null,null],[5,"Window_New","","",null,null],[5,"Window_Close","","",null,null],[5,"Window_IMShow","","",null,null],[5,"Window_GetProperty","","",null,null],[5,"Window_SetProperty","","",null,null],[5,"Window_SetTitle","","",null,null],[5,"Window_WaitKey","","",null,null],[5,"Window_Move","","",null,null],[5,"Window_Resize","","",null,null],[5,"Window_SelectROI","","",null,null],[5,"Window_SelectROIs","","",null,null],[5,"Trackbar_Create","","",null,null],[5,"Trackbar_GetPos","","",null,null],[5,"Trackbar_SetPos","","",null,null],[5,"Trackbar_SetMin","","",null,null],[5,"Trackbar_SetMax","","",null,null],[5,"Image_IMRead","","",null,null],[5,"Image_IMWrite","","",null,null],[5,"Image_IMWrite_WithParams","","",null,null],[5,"Image_IMEncode","","",null,null],[5,"Image_IMDecode","","",null,null],[5,"ArcLength","","",null,null],[5,"ApproxPolyDP","","",null,null],[5,"CvtColor","","",null,null],[5,"ConvexHull","","",null,null],[5,"ConvexityDefects","","",null,null],[5,"BilateralFilter","","",null,null],[5,"Blur","","",null,null],[5,"Dilate","","",null,null],[5,"Erode","","",null,null],[5,"MatchTemplate","","",null,null],[5,"Moments","","",null,null],[5,"PyrDown","","",null,null],[5,"PyrUp","","",null,null],[5,"BoundingRect","","",null,null],[5,"ContourArea","","",null,null],[5,"FindContours","","",null,null],[5,"GaussianBlur","","",null,null],[5,"Laplacian","","",null,null],[5,"Scharr","","",null,null],[5,"GetStructuringElement","","",null,null],[5,"MorphologyEx","","",null,null],[5,"MedianBlur","","",null,null],[5,"Canny","","",null,null],[5,"CornerSubPix","","",null,null],[5,"GoodFeaturesToTrack","","",null,null],[5,"HoughCircles","","",null,null],[5,"HoughCirclesWithParams","","",null,null],[5,"HoughLines","","",null,null],[5,"HoughLinesP","","",null,null],[5,"Threshold","","",null,null],[5,"AdaptiveThreshold","","",null,null],[5,"ArrowedLine","","",null,null],[5,"Circle","","",null,null],[5,"Ellipse","","",null,null],[5,"Line","","",null,null],[5,"Rectangle","","",null,null],[5,"FillPoly","","",null,null],[5,"GetTextSize","","",null,null],[5,"PutText","","",null,null],[5,"Resize","","",null,null],[5,"GetRotationMatrix2D","","",null,null],[5,"WarpAffine","","",null,null],[5,"WarpAffineWithParams","","",null,null],[5,"WarpPerspective","","",null,null],[5,"ApplyColorMap","","",null,null],[5,"ApplyCustomColorMap","","",null,null],[5,"GetPerspectiveTransform","","",null,null],[5,"DrawContours","","",null,null],[5,"CascadeClassifier_New","","",null,null],[5,"CascadeClassifier_Close","","",null,null],[5,"CascadeClassifier_Load","","",null,null],[5,"CascadeClassifier_DetectMultiScale","","",null,null],[5,"CascadeClassifier_DetectMultiScaleWithParams","","",null,null],[5,"HOGDescriptor_New","","",null,null],[5,"HOGDescriptor_Close","","",null,null],[5,"HOGDescriptor_Load","","",null,null],[5,"HOGDescriptor_DetectMultiScale","","",null,null],[5,"HOGDescriptor_DetectMultiScaleWithParams","","",null,null],[5,"HOG_GetDefaultPeopleDetector","","",null,null],[5,"HOGDescriptor_SetSVMDetector","","",null,null],[5,"GroupRectangles","","",null,null],[5,"openCVVersion","","",null,null],[5,"BackgroundSubtractorMOG2_Create","","",null,null],[5,"BackgroundSubtractorMOG2_Close","","",null,null],[5,"BackgroundSubtractorMOG2_Apply","","",null,null],[5,"BackgroundSubtractorKNN_Create","","",null,null],[5,"BackgroundSubtractorKNN_Close","","",null,null],[5,"BackgroundSubtractorKNN_Apply","","",null,null],[5,"CalcOpticalFlowPyrLK","","",null,null],[5,"CalcOpticalFlowFarneback","","",null,null],[5,"VideoCapture_New","","",null,null],[5,"VideoCapture_Close","","",null,null],[5,"VideoCapture_Open","","",null,null],[5,"VideoCapture_OpenDevice","","",null,null],[5,"VideoCapture_Set","","",null,null],[5,"VideoCapture_Get","","",null,null],[5,"VideoCapture_IsOpened","","",null,null],[5,"VideoCapture_Read","","",null,null],[5,"VideoCapture_Grab","","",null,null],[5,"VideoWriter_New","","",null,null],[5,"VideoWriter_Close","","",null,null],[5,"VideoWriter_Open","","",null,null],[5,"VideoWriter_IsOpened","","",null,null],[5,"VideoWriter_Write","","",null,null],[5,"GpuMat_New","","",null,null],[5,"GpuMat_Close","","",null,null],[5,"GpuMat_Upload","","",null,null],[5,"GpuMat_ConvertTo","","",null,null],[5,"GpuMat_Rows","","",null,null],[5,"GpuMat_Cols","","",null,null],[5,"GpuMat_Empty","","",null,null],[5,"HOG_Create","","",null,null],[5,"HOG_Create_WithParams","","",null,null],[5,"HOG_Close","","",null,null],[5,"HOG_SetSVMDetector","","",null,null],[5,"HOG_DetectMultiScale","","",null,null],[5,"HOG_DetectMultiScale_WithConf","","",null,null],[5,"HOG_SetGammaCorrection","","",null,null],[5,"HOG_SetGroupThreshold","","",null,null],[5,"HOG_SetHitThreshold","","",null,null],[5,"HOG_SetL2hysThreshold","","",null,null],[5,"HOG_SetNumLevels","","",null,null],[5,"HOG_SetScaleFactor","","",null,null],[5,"HOG_SetWinSigma","","",null,null],[5,"HOG_SetWinStride","","",null,null],[5,"HOG_GetGammaCorrection","","",null,null],[5,"HOG_GetGroupThreshold","","",null,null],[5,"HOG_GetHitThreshold","","",null,null],[5,"HOG_GetL2hysThreshold","","",null,null],[5,"HOG_GetNumLevels","","",null,null],[5,"HOG_GetScaleFactor","","",null,null],[5,"HOG_GetWinSigma","","",null,null],[5,"HOG_GetWinStride","","",null,null],[5,"GpuCascade_Create","","",null,null],[5,"GpuCascade_Close","","",null,null],[5,"GpuCascade_DetectMultiScale","","",null,null],[5,"GpuCascade_SetFindLargestObject","","",null,null],[5,"GpuCascade_SetMaxNumObjects","","",null,null],[5,"GpuCascade_SetMinNeighbors","","",null,null],[5,"GpuCascade_SetMaxObjectSize","","",null,null],[5,"GpuCascade_SetMinObjectSize","","",null,null],[5,"GpuCascade_SetScaleFactor","","",null,null],[5,"GpuCascade_GetClassifierSize","","",null,null],[5,"GpuCascade_GetFindLargestObject","","",null,null],[5,"GpuCascade_GetMaxNumObjects","","",null,null],[5,"GpuCascade_GetMinNeighbors","","",null,null],[5,"GpuCascade_GetMaxObjectSize","","",null,null],[5,"GpuCascade_GetMinObjectSize","","",null,null],[5,"GpuCascade_GetScaleFactor","","",null,null],[6,"int_least8_t","","",null,null],[6,"int_least16_t","","",null,null],[6,"int_least32_t","","",null,null],[6,"int_least64_t","","",null,null],[6,"uint_least8_t","","",null,null],[6,"uint_least16_t","","",null,null],[6,"uint_least32_t","","",null,null],[6,"uint_least64_t","","",null,null],[6,"int_fast8_t","","",null,null],[6,"int_fast16_t","","",null,null],[6,"int_fast32_t","","",null,null],[6,"int_fast64_t","","",null,null],[6,"uint_fast8_t","","",null,null],[6,"uint_fast16_t","","",null,null],[6,"uint_fast32_t","","",null,null],[6,"uint_fast64_t","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"Contour","","",null,null],[6,"Mat","","",null,null],[6,"TermCriteria","","",null,null],[6,"Net","","",null,null],[6,"AKAZE","","",null,null],[6,"AgastFeatureDetector","","",null,null],[6,"BRISK","","",null,null],[6,"FastFeatureDetector","","",null,null],[6,"GFTTDetector","","",null,null],[6,"KAZE","","",null,null],[6,"MSER","","",null,null],[6,"ORB","","",null,null],[6,"SimpleBlobDetector","","",null,null],[6,"CascadeClassifier","","",null,null],[6,"HOGDescriptor","","",null,null],[6,"BackgroundSubtractorMOG2","","",null,null],[6,"BackgroundSubtractorKNN","","",null,null],[6,"VideoCapture","","",null,null],[6,"VideoWriter","","",null,null],[6,"wchar_t","","",null,null],[6,"GpuMat","","",null,null],[6,"HOG","","",null,null],[6,"GpuCascade","","",null,null],[17,"_STDINT_H","","",null,null],[17,"_FEATURES_H","","",null,null],[17,"_DEFAULT_SOURCE","","",null,null],[17,"_BSD_SOURCE","","",null,null],[17,"_SVID_SOURCE","","",null,null],[17,"__USE_ISOC11","","",null,null],[17,"__USE_ISOC99","","",null,null],[17,"__USE_ISOC95","","",null,null],[17,"__USE_POSIX_IMPLICITLY","","",null,null],[17,"_POSIX_SOURCE","","",null,null],[17,"_POSIX_C_SOURCE","","",null,null],[17,"__USE_POSIX","","",null,null],[17,"__USE_POSIX2","","",null,null],[17,"__USE_POSIX199309","","",null,null],[17,"__USE_POSIX199506","","",null,null],[17,"__USE_XOPEN2K","","",null,null],[17,"__USE_XOPEN2K8","","",null,null],[17,"_ATFILE_SOURCE","","",null,null],[17,"__USE_MISC","","",null,null],[17,"__USE_BSD","","",null,null],[17,"__USE_SVID","","",null,null],[17,"__USE_ATFILE","","",null,null],[17,"__USE_FORTIFY_LEVEL","","",null,null],[17,"_STDC_PREDEF_H","","",null,null],[17,"__STDC_IEC_559__","","",null,null],[17,"__STDC_IEC_559_COMPLEX__","","",null,null],[17,"__STDC_ISO_10646__","","",null,null],[17,"__STDC_NO_THREADS__","","",null,null],[17,"__GNU_LIBRARY__","","",null,null],[17,"__GLIBC__","","",null,null],[17,"__GLIBC_MINOR__","","",null,null],[17,"_SYS_CDEFS_H","","",null,null],[17,"__WORDSIZE","","",null,null],[17,"__WORDSIZE_TIME64_COMPAT32","","",null,null],[17,"__SYSCALL_WORDSIZE","","",null,null],[17,"_BITS_WCHAR_H","","",null,null],[17,"INT8_MIN","","",null,null],[17,"INT16_MIN","","",null,null],[17,"INT32_MIN","","",null,null],[17,"INT8_MAX","","",null,null],[17,"INT16_MAX","","",null,null],[17,"INT32_MAX","","",null,null],[17,"UINT8_MAX","","",null,null],[17,"UINT16_MAX","","",null,null],[17,"UINT32_MAX","","",null,null],[17,"INT_LEAST8_MIN","","",null,null],[17,"INT_LEAST16_MIN","","",null,null],[17,"INT_LEAST32_MIN","","",null,null],[17,"INT_LEAST8_MAX","","",null,null],[17,"INT_LEAST16_MAX","","",null,null],[17,"INT_LEAST32_MAX","","",null,null],[17,"UINT_LEAST8_MAX","","",null,null],[17,"UINT_LEAST16_MAX","","",null,null],[17,"UINT_LEAST32_MAX","","",null,null],[17,"INT_FAST8_MIN","","",null,null],[17,"INT_FAST16_MIN","","",null,null],[17,"INT_FAST32_MIN","","",null,null],[17,"INT_FAST8_MAX","","",null,null],[17,"INT_FAST16_MAX","","",null,null],[17,"INT_FAST32_MAX","","",null,null],[17,"UINT_FAST8_MAX","","",null,null],[17,"UINT_FAST16_MAX","","",null,null],[17,"UINT_FAST32_MAX","","",null,null],[17,"INTPTR_MIN","","",null,null],[17,"INTPTR_MAX","","",null,null],[17,"UINTPTR_MAX","","",null,null],[17,"PTRDIFF_MIN","","",null,null],[17,"PTRDIFF_MAX","","",null,null],[17,"SIG_ATOMIC_MIN","","",null,null],[17,"SIG_ATOMIC_MAX","","",null,null],[17,"SIZE_MAX","","",null,null],[17,"WINT_MIN","","",null,null],[17,"WINT_MAX","","",null,null],[17,"true_","","",null,null],[17,"false_","","",null,null],[17,"__bool_true_false_are_defined","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bytearray"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"intvector"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rawdata"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"points"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"contours"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"rects"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"keypoint"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"keypoints"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"moment"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"mats"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"max_align_t"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"vecdouble"}}]],"paths":[[3,"String"],[3,"ByteArray"],[3,"IntVector"],[3,"RawData"],[3,"Point"],[3,"Points"],[3,"Contours"],[3,"Rect"],[3,"Rects"],[3,"Size"],[3,"Scalar"],[3,"KeyPoint"],[3,"KeyPoints"],[3,"Moment"],[3,"Mats"],[3,"max_align_t"],[3,"VecDouble"]]};
searchIndex["rustcv"] = {"doc":"This library primarily provides a binding and API for OpenCV 3.x.","items":[[4,"CvError","rustcv","Custom errors.",null,null],[13,"InvalidString","","Indicates that string was invalid",0,null],[13,"InvalidPath","","Indicates that path was invalid",0,null],[13,"InvalidCascadeModel","","Indicates that cascade model was invalid",0,null],[13,"EntryNotFound","","Indicates that there is no entry on specified path",0,null],[13,"EnumFromPrimitiveConversionError","","Indicates that conversion from primitive to enum type is failed",0,null],[12,"value","rustcv::CvError","Value that caused an error",0,null],[13,"UnknownError","rustcv","Indicates that error occurred in C++ code",0,null],[13,"UnicodeChars","","Indicates that string contains non ascii characters",0,null],[0,"core","","[Core data structures in OpenCV][opencv-core].",null,null],[3,"Scalar","rustcv::core","",null,null],[12,"val1","","",1,null],[12,"val2","","",1,null],[12,"val3","","",1,null],[12,"val4","","",1,null],[3,"Rect","","",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[12,"width","","",2,null],[12,"height","","",2,null],[3,"Size","","",null,null],[12,"width","","",3,null],[12,"height","","",3,null],[3,"Point","","",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[3,"KeyPoint","","",null,null],[12,"x","","",5,null],[12,"y","","",5,null],[12,"size","","",5,null],[12,"angle","","",5,null],[12,"response","","",5,null],[12,"octave","","",5,null],[12,"classID","","",5,null],[3,"Mat","","The class `Mat` represents an n-dimensional dense numerical single-channel or multi-channel array. It can be used to store real or complex-valued vectors and matrices, grayscale or color images, voxel volumes, vector fields, point clouds, tensors, histograms",null,null],[4,"CvType","","Here is the `CvType` in an easy-to-read table.",null,null],[13,"Cv8UC1","","8 bit unsigned, single channel (grey image)",6,null],[13,"Cv8SC1","","8 bit signed, single channel (grey image)",6,null],[13,"Cv16UC1","","16 bit unsigned, single channel (grey image)",6,null],[13,"Cv16SC1","","16 bit signed, single channel (grey image)",6,null],[13,"Cv32SC1","","32 bit signed, single channel (grey image)",6,null],[13,"Cv32FC1","","32 bit float, single channel (grey image)",6,null],[13,"Cv64FC1","","32 bit float, single channel (grey image)",6,null],[13,"Cv8UC2","","8 bit, two channel (rarelly seen)",6,null],[13,"Cv8UC3","","8 bit unsigned, three channels (RGB image)",6,null],[13,"Cv8SC3","","8 bit signed, three channels (RGB image)",6,null],[13,"Cv16UC3","","16 bit unsigned, three channels (RGB image)",6,null],[13,"Cv16SC3","","16 bit signed, three channels (RGB image)",6,null],[13,"Cv32SC3","","32 bit signed, three channels (RGB image)",6,null],[13,"Cv32FC3","","32 bit float, three channels (RGB image)",6,null],[13,"Cv64FC3","","32 bit float, three channels (RGB image)",6,null],[4,"BorderType","","Various border types, image boundaries are denoted with `|`.",null,null],[13,"Constant","","`iiiiii|abcdefgh|iiiiiii`  with some specified `i`",7,null],[13,"Replicate","","`aaaaaa|abcdefgh|hhhhhhh`",7,null],[13,"Reflect","","`fedcba|abcdefgh|hgfedcb`",7,null],[13,"Wrap","","`cdefgh|abcdefgh|abcdefg`",7,null],[13,"Reflect101","","`gfedcb|abcdefgh|gfedcba`",7,null],[13,"Transparent","","`uvwxyz|abcdefgh|ijklmno`",7,null],[13,"Isolated","","Do not look outside of ROI.",7,null],[4,"CovarFlag","","Covariation flags.",null,null],[13,"Scrambled","","The covariance matrix will be nsamples x nsamples. Such an unusual covariance matrix is used for fast PCA of a set of very large vectors (see, for example, the EigenFaces technique for face recognition). Eigenvalues of this \"scrambled\" matrix match the eigenvalues of the true covariance matrix. The \"true\" eigenvectors can be easily calculated from the eigenvectors of the \"scrambled\" covariance matrix.",8,null],[13,"Normal","","covar will be a square matrix of the same size as the total number of elements in each input vector. One and only one of COVAR_SCRAMBLED and COVAR_NORMAL must be specified.",8,null],[13,"UseAvg","","If the flag is specified, the function does not calculate mean from the input vectors but, instead, uses the passed mean vector. This is useful if mean has been pre-calculated or known in advance, or if the covariance matrix is calculated by parts. In this case, mean is not a mean vector of the input sub-set of vectors but rather the mean vector of the whole set.",8,null],[13,"Scale","","If the flag is specified, the covariance matrix is scaled. In the \"normal\" mode, scale is 1./nsamples . In the \"scrambled\" mode, scale is the reciprocal of the total number of elements in each input vector. By default (if the flag is not specified), the covariance matrix is not scaled ( scale=1 ).",8,null],[13,"Rows","","If the flag is specified, all the input vectors are stored as rows of the samples matrix. mean should be a single-row vector in this case.",8,null],[13,"Cols","","If the flag is specified, all the input vectors are stored as columns of the samples matrix. mean should be a single-column vector in this case.",8,null],[4,"CompareType","","Comparison type.",null,null],[13,"Eq","","src1 is equal to src2.",9,null],[13,"Gt","","src1 is greater to src2.",9,null],[13,"Ge","","src1 is greater than or equal to src2.",9,null],[13,"Lt","","src1 is less than to src2.",9,null],[13,"Le","","src1 is less than or equal to src2.",9,null],[13,"Ne","","src1 is not equal to src2.",9,null],[5,"abs_diff","","Calculates the per-element absolute difference between two arrays or between an array and a scalar.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"}],"output":null}],[5,"add","","Calculates the per-element sum of two arrays or an array and a scalar.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"}],"output":null}],[5,"add_weighted","","Calculates the weighted sum of two arrays (dst = src1*alpha + src2*beta + gamma).",null,{"inputs":[{"name":"mat"},{"name":"f64"},{"name":"mat"},{"name":"f64"},{"name":"f64"},{"name":"mat"}],"output":null}],[5,"bitwise_and","","Computes bitwise conjunction of the two arrays (dst = src1 & src2).",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"}],"output":null}],[5,"bitwise_not","","Inverts every bit of an array (dst = !src).",null,{"inputs":[{"name":"mat"},{"name":"mat"}],"output":null}],[5,"bitwise_or","","Computes bitwise disjunction of the two arrays (dst = src1 | src2).",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"}],"output":null}],[5,"bitwise_xor","","Computes bitwise \"exclusive or\" of the two arrays (dst = src1 ^ src2).",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"}],"output":null}],[5,"batch_distance","","A naive nearest neighbor finder.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"},{"name":"i32"},{"name":"mat"},{"name":"i32"},{"name":"i32"},{"name":"mat"},{"name":"i32"},{"name":"bool"}],"output":null}],[5,"border_interpolate","","Computes the source location of an extrapolated pixel.",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"bordertype"}],"output":{"name":"i32"}}],[5,"calc_covar_matrix","","Calculates the covariance matrix of a set of vectors.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"},{"name":"covarflag"},{"name":"i32"}],"output":null}],[5,"cart_to_polar","","Calculates the magnitude and angle of 2D vectors.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"},{"name":"mat"},{"name":"bool"}],"output":null}],[5,"compare","","Performs the per-element comparison of two arrays or an array and scalar value.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"},{"name":"comparetype"}],"output":null}],[5,"count_non_zero","","Counts non-zero array elements.",null,{"inputs":[{"name":"mat"}],"output":{"name":"i32"}}],[5,"complete_symm","","Copies the lower or the upper half of a square matrix to its another half.",null,{"inputs":[{"name":"mat"},{"name":"bool"}],"output":null}],[5,"convert_scale_abs","","Scales, calculates absolute values, and converts the result to 8-bit.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"copy_make_border","","Forms a border around an image.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"bordertype"},{"name":"scalar"}],"output":null}],[5,"min_max_loc","","Finds the global minimum and maximum in an array.",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"cvtype"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"cvtype"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"bordertype"}}],[11,"from","","",10,{"inputs":[{"name":"mat"}],"output":{"name":"mat"}}],[11,"new","","Creates an empty `Mat` struct.",10,{"inputs":[],"output":{"name":"mat"}}],[11,"new_with_size","","Creates an empty `Mat` struct with size.",10,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"cvtype"}],"output":{"name":"mat"}}],[11,"new_from_scalar","","Creates an empty `Mat` struct with a constant scalar.",10,{"inputs":[{"name":"scalar"},{"name":"cvtype"}],"output":{"name":"mat"}}],[11,"new_from_bytes","","Creates an empty `Mat` struct from buffer.",10,null],[11,"empty","","Determines if the Mat is empty or not.",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"copy_to","","Copies Mat into destination Mat.",10,{"inputs":[{"name":"self"},{"name":"mat"}],"output":null}],[11,"copy_to_with_mask","","Copies Mat into destination Mat, with a mask.",10,{"inputs":[{"name":"self"},{"name":"mat"},{"name":"mat"}],"output":null}],[11,"convert_to","","Converts Mat into destination Mat.",10,{"inputs":[{"name":"self"},{"name":"mat"},{"name":"cvtype"}],"output":null}],[11,"to_bytes","","Copies the underlying Mat data to a byte array.",10,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"vec"}}],[11,"region","","Returns a new Mat that points to a region of this Mat. Changes made to the region Mat will affect the original Mat, since they are pointers to the underlying OpenCV Mat object.",10,{"inputs":[{"name":"self"},{"name":"rect"}],"output":{"name":"mat"}}],[11,"reshape","","Changes the shape and/or the number of channels of a 2D matrix without copying the data. The method makes a new matrix header for the internal data.",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"mat"}}],[11,"convert_fp16","","Converts a Mat to half-precision floating point.",10,{"inputs":[{"name":"self"}],"output":{"name":"mat"}}],[11,"mean","","Calculates the mean value M of array elements, independently for each channel, and return it as Scalar. TODO: pass second paramter with mask",10,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"sum","","Calculates the per-channel pixel sum of an image.",10,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"lookup_table_transform","","Performs a look-up table transform of an array.",10,{"inputs":[{"name":"self"},{"name":"mat"},{"name":"mat"}],"output":null}],[11,"rows","","Returns the number of rows for this Mat.",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cols","","Returns the number of cols for this Mat.",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"channels","","Returns the number of channels for this Mat.",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cv_type","","Returns the type for this Mat.",10,{"inputs":[{"name":"self"}],"output":{"name":"cvtype"}}],[11,"cv_step","","Returns the number of bytes each matrix row occupies.",10,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"uchar_at","","Returns a value from a specific row/col in this Mat (must be CV_8U).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"uchar_at3","","Returns a value from a specific x, y, z in this Mat (must be CV_8U).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"u8"}}],[11,"schar_at","","Returns a value from a specific row/col in this Mat (must be CV_8S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"schar_at3","","Returns a value from a specific x, y, z in this Mat (must be CV_8S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i8"}}],[11,"short_at","","Returns a value from a specific row/col in this Mat (must be CV_16S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"short_at3","","Returns a value from a specific x, y, z in this Mat (must be CV_16S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i16"}}],[11,"int_at","","Returns a value from a specific row/col in this Mat (must be CV_32S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"int_at3","","Returns a value from a specific x, y, z in this Mat (must be CV_32S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"float_at","","Returns a value from a specific row/col in this Mat (must be CV_32F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"f32"}}],[11,"float_at3","","Returns a value from a specific x, y, z in this Mat (must be CV_32F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"f32"}}],[11,"double_at","","Returns a value from a specific row/col in this Mat (must be CV_64F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"double_at3","","Returns a value from a specific x, y, z in this Mat (must be CV_64F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"f64"}}],[11,"set_uchar_at","","Sets a value to a specific row/col in this Mat (must be CV_8U).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"u8"}],"output":null}],[11,"set_uchar_at3","","Sets a value to a specific x, y, z in this Mat (must be CV_8U).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"u8"}],"output":null}],[11,"set_schar_at","","Sets a value to a specific row/col in this Mat (must be CV_8S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i8"}],"output":null}],[11,"set_schar_at3","","Sets a value to a specific x, y, z in this Mat (must be CV_8S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i8"}],"output":null}],[11,"set_short_at","","Sets a value to a specific row/col in this Mat (must be CV_16S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i16"}],"output":null}],[11,"set_short_at3","","Sets a value to a specific x, y, z in this Mat (must be CV_16S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i16"}],"output":null}],[11,"set_int_at","","Sets a value to a specific row/col in this Mat (must be CV_32S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"set_int_at3","","Sets a value to a specific x, y, z in this Mat (must be CV_32S).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"set_float_at","","Sets a value to a specific row/col in this Mat (must be CV_32F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"f32"}],"output":null}],[11,"set_float_at3","","Sets a value to a specific x, y, z in this Mat (must be CV_32F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f32"}],"output":null}],[11,"set_double_at","","Sets a value to a specific row/col in this Mat (must be CV_64F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":null}],[11,"set_double_at3","","Sets a value to a specific x, y, z in this Mat (must be CV_64F).",10,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"covarflag"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"comparetype"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"comparetype"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[0,"dnn","rustcv","Deep Neural Network.",null,null],[3,"Net","rustcv::dnn","Cascade classifier class for object detection.",null,null],[5,"blob_from_image","","Creates 4-dimensional blob from image. Optionally resizes and crops image from center, subtract mean values, scales values by scalefactor, swap Blue and Red channels.",null,{"inputs":[{"name":"mat"},{"name":"f64"},{"name":"size"},{"name":"scalar"},{"name":"bool"},{"name":"bool"}],"output":{"name":"mat"}}],[5,"get_blob_channel","","Extracts a single (2d)channel from a 4 dimensional blob structure (this might e.g. contain the results of a SSD or YOLO detection, a bones structure from pose detection, or a color plane from Colorization)",null,{"inputs":[{"name":"mat"},{"name":"i32"},{"name":"i32"}],"output":{"name":"mat"}}],[5,"get_blob_size","","Retrieves the 4 dimensional size information in (N,C,H,W) order",null,{"inputs":[{"name":"mat"}],"output":{"name":"scalar"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_caffe","","Reads a network model stored in Caffe framework's format.",11,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_tensorflow","","Reads a network model stored in Caffe framework's format.",11,{"inputs":[{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"empty","","Returns true if there are no layers in the network.",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"set_input","","Sets the new value for the layer output blob.",11,{"inputs":[{"name":"self"},{"name":"mat"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"forward","","Runs forward pass to compute output of layer with name outputName.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["mat","error"],"name":"result"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[0,"features2d","rustcv","[2D Features Framework][opencv-features2d].",null,null],[3,"MSER","rustcv::features2d","Maximally stable extremal region extractor.",null,null],[3,"SimpleBlobDetector","","Class for extracting blobs from an image.",null,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new maximally stable extremal region (MSER) extractor criteria.",12,{"inputs":[],"output":{"name":"self"}}],[11,"detect","","Detects keypoints in an image using MSER.",12,{"inputs":[{"name":"self"},{"name":"mat"}],"output":{"generics":["keypoint"],"name":"vec"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Returns a new `SimpleBlobDetector`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"detect","","Detect keypoints in an image using SimpleBlobDetector.",13,{"inputs":[{"name":"self"},{"name":"mat"}],"output":{"generics":["keypoint"],"name":"vec"}}],[0,"highgui","rustcv","High-level GUI.",null,null],[3,"Window","rustcv::highgui","Window is a wrapper around OpenCV's \"HighGUI\" named windows. While OpenCV was designed for use in full-scale applications and can be used within functionally rich UI frameworks (such as Qt*, WinForms*, or Cocoa*) or without any UI at all, sometimes there it is required to try functionality quickly and visualize the results. This is what the HighGUI module has been designed for.",null,null],[4,"WindowFlag","","Flags for Window::new. The flag can be updated via Window::set_property and retrieved via Window::get_property. This only supports a subset of all cv::WindowFlags because C/C++ allows enum with the same value but Rust is stricter.",null,null],[13,"Normal","","the window can be resized (no constraint) or switched to fullscreen.",14,null],[13,"Autosize","","the window is constrained by the image displayed.",14,null],[13,"Opengl","","the window is with opengl support.",14,null],[13,"FreeRatio","","the window can be resized arbitrarily (no ratio constraint).",14,null],[4,"WindowProperty","","Flags for Window property.",null,null],[13,"Fullscreen","","Fullscreen property",15,null],[13,"Autosize","","Autosize.",15,null],[13,"AspectRatio","","Window's aspect ration",15,null],[13,"OpenGl","","Opengl support.",15,null],[13,"Visible","","Visibile or not.",15,null],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"windowflag"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"windowflag"}],"output":{"name":"bool"}}],[11,"hash","","",14,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"windowproperty"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"windowproperty"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"new","","Creates a new named window.",16,{"inputs":[{"name":"str"},{"name":"windowflag"}],"output":{"generics":["error"],"name":"result"}}],[11,"name","","Returns the window name.",16,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"is_open","","Checks if the Window is open.",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"show","","Displays an image in the specified window. This function should be followed by the `WaitKey` function which displays the image for specified milliseconds. Otherwise, it won't display the image.",16,{"inputs":[{"name":"self"},{"name":"mat"}],"output":null}],[11,"wait_key","","Waits for a pressed key. This function is the only method in OpenCV's HighGUI that can fetch and handle events, so it needs to be called periodically for normal event processing",16,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"i32"}}],[11,"get_property","","Returns properties of a window.",16,{"inputs":[{"name":"self"},{"name":"windowproperty"}],"output":{"name":"f64"}}],[11,"set_property","","Changes parameters of a window dynamically.",16,{"inputs":[{"name":"self"},{"name":"windowproperty"},{"name":"windowflag"}],"output":null}],[11,"set_title","","Changes Window name dynamically.",16,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"move_window","","Moves window to the specified position.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"resize","","Resizes window to the specified size.",16,{"inputs":[{"name":"self"},{"name":"i32"},{"name":"i32"}],"output":null}],[11,"close","","Closes the window.",16,{"inputs":[{"name":"self"}],"output":null}],[0,"imgcodecs","rustcv","[Image file reading and writing][opencv-imgcodecs].",null,null],[4,"ImageReadMode","rustcv::imgcodecs","[ImageReadMode][opencv-imread].",null,null],[13,"Unchanged","","If set, return the loaded image as is (with alpha channel, otherwise it gets cropped",17,null],[13,"Grayscale","","If set, always convert image to the single channel grayscale image.",17,null],[13,"Color","","If set, always convert image to the 3 channel BGR color image.",17,null],[13,"AnyDepth","","If set, return 16-bit/32-bit image when the input has the corresponding depth, otherwise convert it to 8-bit.",17,null],[13,"AnyColor","","If set, the image is read in any possible color format.",17,null],[13,"LoadGdal","","If set, use the gdal driver for loading the image.",17,null],[13,"ReducedGrayscale2","","If set, always convert image to the single channel grayscale image and the image size reduced 1/2.",17,null],[13,"ReducedColor2","","If set, always convert image to the 3 channel BGR color image and the image size reduced 1/2.",17,null],[13,"ReducedGrayscale4","","If set, always convert image to the single channel grayscale image and the image size reduced 1/4.",17,null],[13,"ReducedColor4","","If set, always convert image to the 3 channel BGR color image and the image size reduced 1/4.",17,null],[13,"ReducedGrayscale8","","If set, always convert image to the single channel grayscale image and the image size reduced 1/8.",17,null],[13,"ReducedColor8","","If set, always convert image to the 3 channel BGR color image and the image size reduced 1/8.",17,null],[4,"ImageWriteMode","","Image write mode. See documentation for details.",null,null],[13,"JpegQuality","","For JPEG, it can be a quality from 0 to 100 (the higher is the better). Default value is 95.",18,null],[13,"JpegProgressive","","Enable JPEG features, 0 or 1, default is False.",18,null],[13,"JpegOptimize","","Enable JPEG features, 0 or 1, default is False.",18,null],[13,"JpegRstInterval","","JPEG restart interval, 0 - 65535, default is 0 - no restart.",18,null],[13,"JpegLumaQuality","","Separate luma quality level, 0 - 100, default is 0 - don't use.",18,null],[13,"JpegChromaQuality","","Separate chroma quality level, 0 - 100, default is 0 - don't use.",18,null],[13,"PngCompression","","For PNG, it can be the compression level from 0 to 9. A higher value means a smaller size and longer compression time. Default value is 3. Also strategy is changed to IMWRITE_PNG_STRATEGY_DEFAULT (Z_DEFAULT_STRATEGY).",18,null],[13,"PngStrategy","","One of cv::ImwritePNGFlags, default is IMWRITE_PNG_STRATEGY_DEFAULT.",18,null],[13,"PngBilevel","","Binary level PNG, 0 or 1, default is 0.",18,null],[13,"PxmBinary","","For PPM, PGM, or PBM, it can be a binary format flag, 0 or 1. Default value is 1.",18,null],[13,"WebpQuality","","For WEBP, it can be a quality from 1 to 100 (the higher is the better). By default (without any parameter) and for quality above 100 the lossless compression is used.",18,null],[13,"PamTupletype","","For PAM, sets the TUPLETYPE field to the corresponding string value that is defined for the format",18,null],[4,"ImageWritePngFlag","","Image write PNG flag. See documentation for details.",null,null],[13,"Default","","Use this value for normal data.",19,null],[13,"Filtered","","Use this value for data produced by a filter (or predictor).Filtered data consists mostly of small values with a somewhat random distribution. In this case, the compression algorithm is tuned to compress them better.",19,null],[13,"HuffmanOnly","","Use this value to force Huffman encoding only (no string match).",19,null],[13,"RLE","","Use this value to limit match distances to one (run-length encoding).",19,null],[13,"Fixed","","Using this value prevents the use of dynamic Huffman codes, allowing for a simpler decoder for special applications.",19,null],[5,"imread","","Loads an image from a file.",null,{"inputs":[{"name":"p"},{"name":"imagereadmode"}],"output":{"generics":["mat","error"],"name":"result"}}],[5,"imwrite","","Writes an image to a file.",null,{"inputs":[{"name":"p"},{"name":"mat"}],"output":{"generics":["bool","error"],"name":"result"}}],[5,"imwrite_with_params","","Writes an image to a file.",null,{"inputs":[{"name":"p"},{"name":"mat"},{"generics":["i32"],"name":"vec"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"imagereadmode"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"imagereadmode"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"imagewritemode"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"imagewritemode"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"imagewritepngflag"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"imagewritepngflag"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[0,"imgproc","rustcv","Image Processing",null,null],[4,"ColorConversion","rustcv::imgproc","Color conversion code used in `cvt_color`.",null,null],[13,"BGR2BGRA","","",20,null],[13,"BGRA2BGR","","",20,null],[13,"BGR2RGBA","","",20,null],[13,"RGBA2BGR","","",20,null],[13,"BGR2RGB","","",20,null],[13,"BGRA2RGBA","","",20,null],[13,"BGR2GRAY","","",20,null],[13,"RGB2GRAY","","",20,null],[13,"GRAY2BGR","","",20,null],[13,"GRAY2BGRA","","",20,null],[13,"BGRA2GRAY","","",20,null],[13,"RGBA2GRAY","","",20,null],[13,"BGR2BGR565","","",20,null],[13,"RGB2BGR565","","",20,null],[13,"BGR5652BGR","","",20,null],[13,"BGR5652RGB","","",20,null],[13,"BGRA2BGR565","","",20,null],[13,"RGBA2BGR565","","",20,null],[13,"BGR5652BGRA","","",20,null],[13,"BGR5652RGBA","","",20,null],[13,"GRAY2BGR565","","",20,null],[13,"BGR5652GRAY","","",20,null],[13,"BGR2BGR555","","",20,null],[13,"RGB2BGR555","","",20,null],[13,"BGR5552BGR","","",20,null],[13,"BGR5552RGB","","",20,null],[13,"BGRA2BGR555","","",20,null],[13,"RGBA2BGR555","","",20,null],[13,"BGR5552BGRA","","",20,null],[13,"BGR5552RGBA","","",20,null],[13,"GRAY2BGR555","","",20,null],[13,"BGR5552GRAY","","",20,null],[13,"BGR2XYZ","","",20,null],[13,"RGB2XYZ","","",20,null],[13,"XYZ2BGR","","",20,null],[13,"XYZ2RGB","","",20,null],[13,"BGR2YCrCb","","",20,null],[13,"RGB2YCrCb","","",20,null],[13,"YCrCb2BGR","","",20,null],[13,"YCrCb2RGB","","",20,null],[13,"BGR2HSV","","",20,null],[13,"RGB2HSV","","",20,null],[13,"BGR2Lab","","",20,null],[13,"RGB2Lab","","",20,null],[13,"BGR2Luv","","",20,null],[13,"RGB2Luv","","",20,null],[13,"BGR2HLS","","",20,null],[13,"RGB2HLS","","",20,null],[13,"HSV2BGR","","",20,null],[13,"HSV2RGB","","",20,null],[13,"Lab2BGR","","",20,null],[13,"Lab2RGB","","",20,null],[13,"Luv2BGR","","",20,null],[13,"Luv2RGB","","",20,null],[13,"HLS2BGR","","",20,null],[13,"HLS2RGB","","",20,null],[13,"BGR2HSV_FULL","","",20,null],[13,"RGB2HSV_FULL","","",20,null],[13,"BGR2HLS_FULL","","",20,null],[13,"RGB2HLS_FULL","","",20,null],[13,"HSV2BGR_FULL","","",20,null],[13,"HSV2RGB_FULL","","",20,null],[13,"HLS2BGR_FULL","","",20,null],[13,"HLS2RGB_FULL","","",20,null],[13,"LBGR2Lab","","",20,null],[13,"LRGB2Lab","","",20,null],[13,"LBGR2Luv","","",20,null],[13,"LRGB2Luv","","",20,null],[13,"Lab2LBGR","","",20,null],[13,"Lab2LRGB","","",20,null],[13,"Luv2LBGR","","",20,null],[13,"Luv2LRGB","","",20,null],[13,"BGR2YUV","","",20,null],[13,"RGB2YUV","","",20,null],[13,"YUV2BGR","","",20,null],[13,"YUV2RGB","","",20,null],[13,"YUV2RGB_NV12","","",20,null],[13,"YUV2BGR_NV12","","",20,null],[13,"YUV2RGB_NV21","","",20,null],[13,"YUV2BGR_NV21","","",20,null],[13,"YUV2RGBA_NV12","","",20,null],[13,"YUV2BGRA_NV12","","",20,null],[13,"YUV2RGBA_NV21","","",20,null],[13,"YUV2BGRA_NV21","","",20,null],[13,"YUV2RGB_YV12","","",20,null],[13,"YUV2BGR_YV12","","",20,null],[13,"YUV2RGB_IYUV","","",20,null],[13,"YUV2BGR_IYUV","","",20,null],[13,"YUV2RGBA_YV12","","",20,null],[13,"YUV2BGRA_YV12","","",20,null],[13,"YUV2RGBA_IYUV","","",20,null],[13,"YUV2BGRA_IYUV","","",20,null],[13,"YUV2GRAY_420","","",20,null],[13,"YUV2RGB_UYVY","","",20,null],[13,"YUV2BGR_UYVY","","",20,null],[13,"YUV2RGBA_UYVY","","",20,null],[13,"YUV2BGRA_UYVY","","",20,null],[13,"YUV2RGB_YUY2","","",20,null],[13,"YUV2BGR_YUY2","","",20,null],[13,"YUV2RGB_YVYU","","",20,null],[13,"YUV2BGR_YVYU","","",20,null],[13,"YUV2RGBA_YUY2","","",20,null],[13,"YUV2BGRA_YUY2","","",20,null],[13,"YUV2RGBA_YVYU","","",20,null],[13,"YUV2BGRA_YVYU","","",20,null],[13,"YUV2GRAY_UYVY","","",20,null],[13,"YUV2GRAY_YUY2","","",20,null],[13,"RGBA2mRGBA","","",20,null],[13,"mRGBA2RGBA","","",20,null],[13,"RGB2YUV_I420","","",20,null],[13,"BGR2YUV_I420","","",20,null],[13,"RGBA2YUV_I420","","",20,null],[13,"BGRA2YUV_I420","","",20,null],[13,"RGB2YUV_YV12","","",20,null],[13,"BGR2YUV_YV12","","",20,null],[13,"RGBA2YUV_YV12","","",20,null],[13,"BGRA2YUV_YV12","","",20,null],[13,"BayerBG2BGR","","",20,null],[13,"BayerGB2BGR","","",20,null],[13,"BayerRG2BGR","","",20,null],[13,"BayerGR2BGR","","",20,null],[13,"BayerBG2GRAY","","",20,null],[13,"BayerGB2GRAY","","",20,null],[13,"BayerRG2GRAY","","",20,null],[13,"BayerGR2GRAY","","",20,null],[13,"BayerBG2BGR_VNG","","",20,null],[13,"BayerGB2BGR_VNG","","",20,null],[13,"BayerRG2BGR_VNG","","",20,null],[13,"BayerGR2BGR_VNG","","",20,null],[13,"BayerBG2BGR_EA","","",20,null],[13,"BayerGB2BGR_EA","","",20,null],[13,"BayerRG2BGR_EA","","",20,null],[13,"BayerGR2BGR_EA","","",20,null],[13,"COLORCVT_MAX","","",20,null],[4,"TemplateMatchMode","","TemplateMatchMode is the type of the template matching operation.",null,null],[13,"SqDiff","","",21,null],[13,"SqDiffNormed","","",21,null],[13,"Ccorr","","",21,null],[13,"CcorrNormed","","",21,null],[13,"Ccoeff","","",21,null],[13,"CcoeffNormed","","",21,null],[4,"ThresholdType","","Type of threshold operation.",null,null],[13,"Binary","","ThresholdBinary",22,null],[13,"BinaryInv","","ThresholdBinaryInv",22,null],[13,"Trunc","","ThresholdTrunc",22,null],[13,"ToZero","","ThresholdToZero",22,null],[13,"ToZeroInv","","ThresholdToZeroInv",22,null],[13,"Mask","","ThresholdMask",22,null],[13,"Otsu","","ThresholdOtsu",22,null],[13,"Triangle","","ThresholdTriangle",22,null],[4,"InterpolationFlag","","Interpolation algorithm",null,null],[13,"Nearst","","nearest neighbor interpolation",23,null],[13,"Linear","","bilinear interpolation",23,null],[13,"Cubic","","bicubic interpolation",23,null],[13,"Area","","resampling using pixel area relation. It may be a preferred method for image decimation, as it gives moire'-free results. But when the image is zoomed, it is similar to the INTER_NEAREST method.",23,null],[13,"Lanczos4","","Lanczos interpolation over 8x8 neighborhood",23,null],[13,"LinearExact","","Bit exact bilinear interpolation",23,null],[13,"Max","","mask for interpolation codes",23,null],[13,"WarpFillOutliers","","flag, fills all of the destination image pixels. If some of them correspond to outliers in the source image, they are set to zero",23,null],[13,"WarpInverseMap","","flag, inverse transformation",23,null],[5,"arc_length","","Calculates a contour perimeter or a curve length.",null,{"inputs":[{"name":"vec"},{"name":"bool"}],"output":{"name":"f64"}}],[5,"cvt_color","","Convert an image from one color space to another.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"colorconversion"}],"output":null}],[5,"match_template","","Compares a template against overlapped image regions.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"mat"},{"name":"templatematchmode"},{"name":"mat"}],"output":null}],[5,"pyr_down","","Blurs an image and downsamples it. This function performs the downsampling step of the Gaussian pyramid construction.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"size"},{"name":"bordertype"}],"output":null}],[5,"pyr_up","","Upsamples an image and then blurs it. This function performs the upsampling step of the Gaussian pyramid construction.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"size"},{"name":"bordertype"}],"output":null}],[5,"gaussian_blur","","GaussianBlur blurs an image Mat using a Gaussian filter.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"size"},{"name":"f64"},{"name":"f64"},{"name":"bordertype"}],"output":null}],[5,"laplacian","","Calculates the Laplacian of an image.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"bordertype"}],"output":null}],[5,"scharr","","Calculates the first x- or y- image derivative using Scharr operator.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"bordertype"}],"output":null}],[5,"median_blur","","Blurs an image using the median filter.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"i32"}],"output":null}],[5,"canny","","Finds edges in an image using the Canny algorithm.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"good_features_to_track","","Determines strong corners on an image. The function finds the most prominent corners in the image or in the specified image region.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"i32"},{"name":"f64"},{"name":"f64"}],"output":null}],[5,"threshold","","Applies a fixed-level threshold to each array element.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"f64"},{"name":"f64"},{"name":"thresholdtype"}],"output":null}],[5,"circle","","Draws a circle.",null,{"inputs":[{"name":"mat"},{"name":"point"},{"name":"i32"},{"name":"scalar"},{"name":"i32"}],"output":null}],[5,"ellipse","","Draws a simple or thick elliptic arc or fills an ellipse sector.",null,{"inputs":[{"name":"mat"},{"name":"point"},{"name":"point"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"scalar"},{"name":"i32"}],"output":null}],[5,"line","","Draws a line segment connecting two points.",null,{"inputs":[{"name":"mat"},{"name":"point"},{"name":"point"},{"name":"scalar"},{"name":"i32"}],"output":null}],[5,"rectangle","","Rectangle draws a simple, thick, or filled up-right rectangle.  It renders a rectangle with the desired characteristics to the target Mat image.",null,{"inputs":[{"name":"mat"},{"name":"rect"},{"name":"scalar"},{"name":"i32"}],"output":null}],[5,"resize","","Resize resizes an image.  It resizes the image src down to or up to the specified size, storing the result in dst. Note that src and dst may be the same image. If you wish to scale by factor, an empty sz may be passed and non-zero fx and fy. Likewise, if you wish to scale to an explicit size, a non-empty sz may be passed with zero for both fx and fy.",null,{"inputs":[{"name":"mat"},{"name":"mat"},{"name":"size"},{"name":"f64"},{"name":"f64"},{"name":"interpolationflag"}],"output":null}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"colorconversion"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"colorconversion"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"templatematchmode"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"templatematchmode"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"thresholdtype"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"thresholdtype"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"interpolationflag"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"interpolationflag"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[0,"objdetect","rustcv","Object Detection.",null,null],[3,"CascadeClassifier","rustcv::objdetect","Cascade classifier class for object detection.",null,null],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a cascade classifier, uninitialized. Before use, call load.",24,{"inputs":[],"output":{"name":"self"}}],[11,"load","","Loads the classifier model from a path.",24,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"detect_multiscale","","Detects objects of different sizes in the input Mat image. The detected objects are returned as a vector of rectangles.",24,{"inputs":[{"name":"self"},{"name":"mat"}],"output":{"generics":["rect"],"name":"vec"}}],[11,"detect_multiscale_with_params","","Detects the object using parameters specified.",24,{"inputs":[{"name":"self"},{"name":"mat"},{"name":"f64"},{"name":"i32"},{"name":"size"},{"name":"size"}],"output":{"generics":["rect"],"name":"vec"}}],[11,"drop","","",24,{"inputs":[{"name":"self"}],"output":null}],[0,"cuda","rustcv","[CUDA][opencv-cuda].",null,null],[3,"GpuMat","rustcv::cuda","Base storage class for GPU memory with reference counting.",null,null],[3,"GpuCascade","","Data structure that performs object detection with a cascade classifier.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Default constructor.",25,{"inputs":[],"output":{"name":"gpumat"}}],[11,"rows","","Number of rows.",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"cols","","Number of cols.",25,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"empty","","Whether or not the GpuMat is empty.",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"upload","","Uploads a normal `Mat`",25,{"inputs":[{"name":"self"},{"name":"mat"}],"output":null}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates the classifier from a file.",26,{"inputs":[{"name":"p"}],"output":{"generics":["error"],"name":"result"}}],[11,"detect_multiscale","","Detects objects of different sizes in the input image.",26,{"inputs":[{"name":"self"},{"name":"gpumat"}],"output":{"generics":["rect"],"name":"vec"}}],[11,"fmt","rustcv","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["fail"],"name":"option"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","rustcv::core","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"keypoint"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"scalar"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"point"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"size"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rect"}}]],"paths":[[4,"CvError"],[3,"Scalar"],[3,"Rect"],[3,"Size"],[3,"Point"],[3,"KeyPoint"],[4,"CvType"],[4,"BorderType"],[4,"CovarFlag"],[4,"CompareType"],[3,"Mat"],[3,"Net"],[3,"MSER"],[3,"SimpleBlobDetector"],[4,"WindowFlag"],[4,"WindowProperty"],[3,"Window"],[4,"ImageReadMode"],[4,"ImageWriteMode"],[4,"ImageWritePngFlag"],[4,"ColorConversion"],[4,"TemplateMatchMode"],[4,"ThresholdType"],[4,"InterpolationFlag"],[3,"CascadeClassifier"],[3,"GpuMat"],[3,"GpuCascade"]]};
initSearch(searchIndex);
