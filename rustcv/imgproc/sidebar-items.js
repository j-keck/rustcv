initSidebarItems({"enum":[["ColorConversion","Color conversion code used in `cvt_color`."],["InterpolationFlag","Interpolation algorithm"],["TemplateMatchMode","TemplateMatchMode is the type of the template matching operation."],["ThresholdType","Type of threshold operation."]],"fn":[["arc_length","Calculates a contour perimeter or a curve length."],["canny","Finds edges in an image using the Canny algorithm."],["circle","Draws a circle."],["cvt_color","Convert an image from one color space to another."],["ellipse","Draws a simple or thick elliptic arc or fills an ellipse sector."],["gaussian_blur","GaussianBlur blurs an image Mat using a Gaussian filter."],["good_features_to_track","Determines strong corners on an image. The function finds the most prominent corners in the image or in the specified image region."],["laplacian","Calculates the Laplacian of an image."],["line","Draws a line segment connecting two points."],["match_template","Compares a template against overlapped image regions."],["median_blur","Blurs an image using the median filter."],["pyr_down","Blurs an image and downsamples it. This function performs the downsampling step of the Gaussian pyramid construction."],["pyr_up","Upsamples an image and then blurs it. This function performs the upsampling step of the Gaussian pyramid construction."],["rectangle","Rectangle draws a simple, thick, or filled up-right rectangle.  It renders a rectangle with the desired characteristics to the target Mat image."],["resize","Resize resizes an image.  It resizes the image src down to or up to the specified size, storing the result in dst. Note that src and dst may be the same image. If you wish to scale by factor, an empty sz may be passed and non-zero fx and fy. Likewise, if you wish to scale to an explicit size, a non-empty sz may be passed with zero for both fx and fy."],["scharr","Calculates the first x- or y- image derivative using Scharr operator."],["threshold","Applies a fixed-level threshold to each array element."]]});